#include <VirtualWire.h>
#define rxPin 45
int c[4]={0,0,0,0};
int r1=22;
int g1=23;
int r2=24;
int g2=25;
int r3=26;
int g3=27;
int r4=28;
int g4=29;
const int ledPin =  13;      // the number of the LED pin
int ledState = LOW;          // ledState used to set the LED
long onMillis = 0;           // will store last time LED was updated
void setup()
{ pinMode(r1, OUTPUT);
pinMode(g1, OUTPUT);
pinMode(r2, OUTPUT);
pinMode(g2, OUTPUT);
pinMode(r3, OUTPUT);
pinMode(g3, OUTPUT);
pinMode(r4, OUTPUT);
pinMode(g4, OUTPUT);
  Serial.begin(9600);
  pinMode(ledPin, OUTPUT);
  pinMode(24,OUTPUT);
  // Initialise the IO and ISR
  vw_set_ptt_inverted(true);          // Required for RX Link Module
  vw_setup(2000);                     // Bits per sec
  vw_set_rx_pin(rxPin);               // We will be receiving on pin 2 ie the RX pin from the module connects to this pin.
  vw_rx_start();                      // Start the receiver
}
void loop()
{
  NormalTraffic();
}
void NormalTraffic(){
uint8_t buf[VW_MAX_MESSAGE_LEN];
  uint8_t buflen = VW_MAX_MESSAGE_LEN;
  if (vw_get_message(buf, &buflen))   // check to see if anything has been received
  {
    if(buf[0]==49){
   TrafficLight(1);
    }
    if(buf[0]==50){
     TrafficLight(2);
    }
    if(buf[0]==51){
      TrafficLight(3);
    }
    if(buf[0]==52){
      TrafficLight(4);
    } }
                 digitalWrite(g1, HIGH);
                digitalWrite(r1,LOW);
                digitalWrite(r2, HIGH);
                digitalWrite(r3, HIGH);
                digitalWrite(r4, HIGH);
                delay(5000);
                digitalWrite(g1, LOW);
   if (vw_get_message(buf, &buflen))   // check to see if anything has been received
  {
    if(buf[0]==49){
      TrafficLight(1);
    }
    if(buf[0]==50){
      TrafficLight(2);
    }
    if(buf[0]==51){
      TrafficLight(3);
    }
    if(buf[0]==52){
      TrafficLight(4);
    }
  }
                digitalWrite(g2, HIGH);
                digitalWrite(r2, LOW);
                digitalWrite(r1, HIGH);
                delay(5000);
                digitalWrite(g2, LOW);
 if (vw_get_message(buf, &buflen))   // check to see if anything has been received
  {
    if(buf[0]==49){
      TrafficLight(1);
    }
    if(buf[0]==50){
      TrafficLight(2);
    }
    if(buf[0]==51){
      TrafficLight(3);
    }
    if(buf[0]==52){
      TrafficLight(4);
    }
  }
                digitalWrite(g3, HIGH);
                digitalWrite(r3, LOW);
                digitalWrite(r2, HIGH);
                digitalWrite(r4, HIGH);
                delay(5000);
                digitalWrite(g3, LOW);
  if (vw_get_message(buf, &buflen))   // check to see if anything has been received
  {
    if(buf[0]==49){
      TrafficLight(1);
    }
    if(buf[0]==50){
      TrafficLight(2);
    }
    if(buf[0]==51){
      TrafficLight(3);
    }
    if(buf[0]==52){
      TrafficLight(4);
    }
  }
                digitalWrite(g4, HIGH);
                digitalWrite(r4, LOW);
                digitalWrite(r3, HIGH);
                delay(5000);
                digitalWrite(g4, LOW);
                digitalWrite(r1, LOW);
                return;
     }
void TrafficLight(int buttonNum){
 Serial.println(buttonNum);
 if(buttonNum==1){
  c[0]=c[0]+1;
 }
 if(buttonNum==2){
  c[1]=c[1]+1;
 }
 if(buttonNum==3){
  c[2]=c[2]+1;
 }
 if(buttonNum==4){
  c[3]=c[3]+1;
 }
if(c[0]==1 || c[1]==1 || c[2]==1 || c[3]==1){
  switch(buttonNum){
    case 1:digitalWrite(g1, HIGH);
           digitalWrite(r1, LOW);
           digitalWrite(r2, HIGH);
           digitalWrite(r3, HIGH);
           digitalWrite(r4, HIGH);
           delay(5000);
           digitalWrite(g1, LOW);
           digitalWrite(r1, HIGH);
          return;
    case 2:digitalWrite(g2, HIGH);
    digitalWrite(r2, LOW);
           digitalWrite(r1, HIGH);
           digitalWrite(r3, HIGH);
           digitalWrite(r4, HIGH);
           delay(5000);
           digitalWrite(g2, LOW);
                      digitalWrite(r2, HIGH);
               return;
     case 3:digitalWrite(g3, HIGH);
            digitalWrite(r3, LOW);
           digitalWrite(r1, HIGH);
           digitalWrite(r2, HIGH);
           digitalWrite(r4, HIGH);
           delay(5000);
           digitalWrite(g3, LOW);
                      digitalWrite(r3, HIGH);
              return;
     case 4:digitalWrite(g4, HIGH);
            digitalWrite(r4, LOW);
           digitalWrite(r1, HIGH);
           digitalWrite(r2, HIGH);
           digitalWrite(r3, HIGH);
           delay(5000);
           digitalWrite(g4, LOW);
                   digitalWrite(r4, HIGH);
          return;
  }
 }}
